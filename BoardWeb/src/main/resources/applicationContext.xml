<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 
	<bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" lazy-init="true" scope="singleton"/>
	-->
	<!--
	<bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod"> 
	-->
	<!-- 생성자 injection 방식 -->
	<!--
	<bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod">
		<constructor-arg index="0" ref="apple"></constructor-arg>
		<constructor-arg index="1" value="100000"></constructor-arg>
	</bean>
	-->
	<!-- setter 방식 -->
	<!--
	<bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod"> 
		<property name="speaker" ref="apple"></property>
		<property name="price" value="100000"></property>
	</bean>
	-->
	<!-- p 이용 -->
	<!--  
	<bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" p:speaker-ref="apple" p:price="100000">
	-->
	
	<!--
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>	
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean>
	-->
	
	<!-- component-scan 에 의해 로딩하도록 설정 -->
	<!--
	<context:component-scan base-package="polymorphism"></context:component-scan>
	
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	-->
	
	<context:component-scan base-package="com.springbook.biz"></context:component-scan>	
	
	<!-- 
	<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"></property>
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"></bean>
	-->
	
	<!-- AOP -->
	<!-- 
	<bean id="log" class="com.springbook.biz.common.LogAdvice">
	</bean>
	
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>
		<aop:pointcut id="boardPointcut" expression="execution(* com.springbook.biz..*Impl.get*(com.springbook.biz.board.BoardVO))"/>
		
		<aop:aspect ref="log">
			<aop:after-returning method="printLog3" pointcut-ref="boardPointcut" returning="returnObj"/>
		</aop:aspect>
	</aop:config>
	-->
	
	<!-- AOP 자동 인식 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- Transaction 설정 -->
	<!-- 
	<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>
	-->
	
	
	
	<!-- list 로 주입하면 중복 허용 -->
	<!-- 
	<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강남구</value>
				<value>서울시 도봉구</value>
				<value>서울시 도봉구</value>
			</list>
		</property>
	</bean>	
	-->

	<!-- set 으로 주입하면 중복 불허 -->
	<!-- 
	<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<set value-type="java.lang.String">
				<value>서울시 강남구</value>
				<value>서울시 도봉구</value>
				<value>서울시 도봉구</value>
			</set>
		</property>
		
		<property name="addressMap">
			<map>
				<entry>
					<key><value>홍길동</value></key>
					<value>서울시 강남구</value>
				</entry>
				<entry>
					<key><value>심청이</value></key>
					<value>서울시 도봉구</value>
				</entry>
			</map>
		</property>
	</bean>
	-->
	
	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:config/database.properties"></context:property-placeholder>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!-- 
		<property name="driverClassName" value="org.h2.Driver"></property>
		<property name="url" value="jdbc:h2:tcp://localhost/~/test"></property>
		<property name="username" value="sa"></property>
		<property name="password" value=""></property>
		-->
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz..*(..))"/>
		
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	<!-- Spring 과 MyBatis 연동 설정 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sql-map-config.xml"></property>
	</bean>
	
	<!-- SqlSessionTemplate 이용 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
</beans>
